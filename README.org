* DarkIRC-Runit

Some simple runit scripts to automate starting and stopping the
[[https://darkrenaissance.github.io/darkfi/misc/darkirc/darkirc.html][DarkIRC]] daemon.

** todos

*** TODO do we need to use the command =termux-wake-lock= ?

Can we do it without it?  How badly does android (grapheneOS) want to
kill it when it's in the background?

*** TODO fill-in the following scripts [/]

- [ ] bin/setup.sh
- [ ] bin/darkirc/*

*** TODO sign the sha256sum of the =darkirc.aarch64-android= you bundle with this repo

So that when we clone it, we can now there hasn't been any meddling on
the github's side.

** Setup

Git clone this repo in your termux home directory.  And then =cd= into
the cloned dir.

#+begin_src bash
  git clone https://github.com/k4r4b3y/darkirc-runit.git
  cd darkirc-runit
#+end_src

Then, you should run the install script:

#+begin_src bash
  ./bin/setup.sh

#+end_src

*** bin/setup.sh

Setup script prepares termux for running the

1) runit scripts
2) darkirc daemon

Start by defining the runit-related directories, updating the termux
environment, and then installing the =termux-services= which installs
=runit= along with it:

#+begin_src bash :tangle ./bin/setup.sh :mkdirp yes
  #!/data/data/com.termux/files/usr/bin/bash
  pkg upgrade -y
  pkg install termux-services -y
#+end_src

Define some file and directory paths as variables:

#+begin_src bash :tangle ./bin/setup.sh :mkdirp yes
  homelocalbin_dir="${HOME}/.local/bin"
  runit_dir="${HOME}/.config/sv"
  darkirc_bin="darkirc.aarch64-android"
  darkirc_conf="${HOME}/.config/darkfi/darkirc_config.toml"
  svdir="${PREFIX}/var/service"
#+end_src

Create the directories for the binary and for the runit service
files if they do not already exist:

#+begin_src bash :tangle ./bin/setup.sh :mkdirp yes
  if [ ! -d "${homelocalbin_dir}" ]; then
    mkdir -p "${homelocalbin_dir}"
  fi

  if [ ! -d "${runit_dir}" ]; then
    mkdir "${runit_dir}"
  fi
#+end_src

Copy the runit scripts into the =${runit_dir}= and make them
executable:

#+begin_src bash :tangle ./bin/setup.sh :mkdirp yes
  cp bin/darkirc -t ${runit_dir}
  chmod u+x ${runit_dir}/darkirc/run ${runit_dir}/darkirc/log/run
#+end_src

Copy the =darkirc.aarch64-android= binary into its place and make it
executable:

#+begin_src bash :tangle ./bin/setup.sh :mkdirp yes
  cp bin/${darkirc_bin} -t ${homelocalbin_dir}
  chmod u+x ${homelocalbin_dir}/${darkirc_bin}
#+end_src

And execute it the first time IF the config file isn't in its place:

#+begin_src bash :tangle ./bin/setup.sh :mkdirp yes
  if [ ! -f "${darkirc_conf}" ]; then
    ${homelocalbin_dir}/${darkirc_bin}
  fi
#+end_src

Symlink the runit files to =${SVDIR}=.  

#+begin_src bash :tangle ./bin/setup.sh :mkdirp yes
  ln -sf ${runit_dir} ${svdir}/
#+end_src


** Runit scripts

We use runit to start and stop the =darkirc= daemon running in the
background.  We also use =svloggerd= to keep the redirec the stdout
of =darkirc= daemon to runit logging utility.

*** conf

This file will hold the environment variables.

#+begin_src bash :tangle ./bin/darkirc/conf :mkdirp yes
  homelocalbin_dir="${HOME}/.local/bin"
  darkirc_bin="darkirc.aarch64-android"
  svlogger="/data/data/com.termux/files/usr/share/termux-services/svlogger"
#+end_src

*** run

This script starts the =darkirc=.  Redirect the stderr to stdout, so
that we can keep track of the errors with =svloggerd=.

#+begin_src bash :tangle ./bin/darkirc/run :mkdirp yes
  #!/data/data/com.termux/files/usr/bin/sh
  exec 2>&1
  exec ${homelocalbin_dir}/${darkirc_bin}
#+end_src

*** log

#+begin_src bash :tangle ./bin/darkirc/log/run :mkdirp yes
  #!/data/data/com.termux/files/usr/bin/sh
  exec "${svlogger}" "$@"
#+end_src

#+begin_src bash :tangle ./bin/darkirc/log :mkdirp yes
  # create symlink to the $SVDIR
  ln -sf ${xmr_runit_dir} ${SVDIR}/

  # TODO: also add run conditions using termux-api for battery, and network state (wifi vs data)

#+end_src

-----

[[file:assets/powered_by_emacs.svg][This project is powered by emacs]]
[[file:assets/powered_by_org_mode.svg][This project is powered by orgmode]]

